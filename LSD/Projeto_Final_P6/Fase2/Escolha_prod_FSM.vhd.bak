library IEEE;
use IEEE.STD_LOGIC_1164.all;

entity Escolha_prod_FSM is
							port(clk		    : in std_logic;
								  SW		    : in std_logic_vector(3 downto 0);
								  timeExp    : in std_logic;
								  newTime    : out std_logic;
								  timeVal    : out std_logic_vector(7 downto 0);
								  timeEnable : out std_logic;
								 -- ativad		 : out std_logic;
								  --Enable 	 : out std_logic;
								  selWord    : out std_logic_vector(2 downto 0);
								  Led        : out std_logic_vector(1 downto 0));
end Escolha_prod_FSM;
--------------------

architecture maquina of Escolha_prod_FSM is 

--Sinais para registo--
	Signal s_reset, s_cafe : std_logic;
	Signal s_cha, s_choc   : std_logic;
	
--Constantes para difinição das temporizações--
	Constant Blink_Time   : std_logic_vector(7 downto 0) := "00000101"; --5s
	Constant prepare_Time : std_logic_vector(7 downto 0) := "00001010"; --10s
	
--Sinais e tipos para os Estados--
	type Tstade is (Start, choose, Tcafe, Tcha, Tchoc, Ready_Cafe, Ready_Cha, Ready_Choc);
	Signal s_currentState, s_nextState : Tstade := Start;
	Signal s_stateChanged : std_logic :='1';
	
begin 

Registo_proc : process(clk)
						begin
							if(rising_edge(clk)) then
								s_reset <= SW(3);
								s_choc  <= SW(2);
								s_cha   <= Sw(1);
								s_cafe  <= SW(0);
							end if;
						end process;
						

maquina_proc : process(clk) 
						begin
							if (rising_edge(clk)) then
								if (s_reset = '1') then
									s_currentState <= Start;
									s_stateChanged <= '1';
								else
									if (s_currentState /= s_nextState) then
										s_stateChanged <= '1';
									else
										s_stateChanged <= '0';
									end if;
									s_currentState	<= s_nextState;
								end if;
							end if;
						end process;

		newTime <= s_stateChanged;
		
comb_proc : process(	s_currentState, s_cafe, s_cha, s_choc, timeExp)
					begin
							--Enable     <= '1';
							timeEnable <= '1';
							Led		  <="00";
							timeVal <= (others => '-');
							
						case(	s_currentState) is
						
							when Start =>
									selWord     <= "000";
									timeVal     <= Blink_Time;
									
								if(timeExp = '1') then
									s_nextState <= choose;
								else
									s_nextState <= Start;
								end if;
								
							when choose =>
									selWord    <= "001";
									timeEnable <= '0';
									
								if((s_cafe = '1') and (s_cha = '0') and (s_choc = '0')) then
									s_nextState <= Tcafe;
								elsif((s_cafe = '0') and (s_cha = '1') and (s_choc = '0')) then
									s_nextState <= Tcha;
								elsif((s_cafe = '0') and (s_cha = '0') and (s_choc = '1')) then
									s_nextState <= Tchoc;
								else
									s_nextState <= choose;
								end if;
								
							when Tcafe =>
									selWord  <= "010";
									led      <= "01";
									timeVal  <= prepare_Time;
									
								if(timeExp = '1') then
									s_nextState <= Ready_Cafe;
								else
									s_nextState <= Tcafe;
								end if;
								
							when Tcha =>
									selWord  <= "111";
									led      <= "01";
									timeVal  <= prepare_Time;
									
								if(timeExp = '1') then
									s_nextState <= Ready_Cha;
								else
									s_nextState <= Tcha;
								end if;
								
							when Tchoc =>
									selWord  <= "011";
									led      <= "01";
									timeVal  <= prepare_Time;
									
								if(timeExp = '1') then
									s_nextState <= Ready_Choc;
								else
									s_nextState <= Tchoc;
								end if;
								
							when Ready_Cafe =>
									selWord    <= "010";
									timeEnable <= '0';
									led		  <= "10";
									
								if((s_cafe = '1') or (s_cha = '1') or (s_choc = '1')) then
									s_nextState <= choose;
								else
									s_nextState <= Ready_Cafe;
								end if;
							
							when Ready_Cha =>
									selWord    <= "111";
									timeEnable <= '0';
									led		  <= "10";
									
								if((s_cafe = '1') or (s_cha = '1') or (s_choc = '1')) then
									s_nextState <= choose;
								else
									s_nextState <= Ready_Cha;
								end if;
							
							when Ready_Choc =>
									selWord    <= "011";
									timeEnable <= '0';
									led		  <= "10";
									
								if((s_cafe = '1') or (s_cha = '1') or (s_choc = '1')) then
									s_nextState <= choose;
								else
									s_nextState <= Ready_Choc;
								end if;
								
							when others =>
									s_nextState <= Start;	
						end case;
					end process;				
end maquina;
-----------